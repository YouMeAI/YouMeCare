require('dotenv').config();

const { Telegraf, Markup } = require('telegraf');
const { OpenAI } = require('openai');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI —Å API-–∫–ª—é—á–æ–º
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

const bot = new Telegraf(TELEGRAM_BOT_TOKEN);

let userSessions = {};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
 */
async function getAIResponse(userId, userMessage, context = []) {
  try {
    const messages = [
      { role: 'system', content: 'You are a helpful, empathetic assistant trained to help with emotional and psychological issues.' },
      ...context,
      { role: 'user', content: userMessage },
    ];

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages,
    });

    const response = completion.choices[0].message.content;
    userSessions[userId].context.push({ role: 'assistant', content: response });
    return response;
  } catch (error) {
    console.error(`[–û—à–∏–±–∫–∞ GPT] ${error.message}`);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
 */
bot.start(async (ctx) => {
  const userId = ctx.from.id;
  userSessions[userId] = {
    context: [],
    step: 'problem', // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è
  };

  await ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç?`,
    Markup.inlineKeyboard([
      [Markup.button.callback('üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥', 'start_dialog')],
    ])
  );
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"
 */
bot.on('callback_query', async (ctx) => {
  const userId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;

  await ctx.answerCbQuery();

  if (callbackData === 'start_dialog') {
    await ctx.reply('–ß—Ç–æ —Ç–µ–±—è —Ç—Ä–µ–≤–æ–∂–∏—Ç? –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.');
    userSessions[userId].step = 'dialog';
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userText = ctx.message.text.trim();

  if (!userSessions[userId]) {
    userSessions[userId] = { context: [], step: 'problem' };
  }

  if (userSessions[userId].step === 'dialog') {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
    ctx.replyWithChatAction('typing');
    const response = await getAIResponse(userId, userText, userSessions[userId].context);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    userSessions[userId].context.push({ role: 'user', content: userText });
    await ctx.reply(response);

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await ctx.reply(
      '–í–æ—Ç —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å: –ø–æ–ø—Ä–æ–±—É–π —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, —Å–¥–µ–ª–∞–≤ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö –∏ –≤—ã–¥–æ—Ö, —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞—è—Å—å –Ω–∞ –¥—ã—Ö–∞–Ω–∏–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–º–æ–≥–ª–æ', 'helped')],
        [Markup.button.callback('‚ùå –ù–µ –ø–æ–º–æ–≥–ª–æ', 'not_helped')],
        [Markup.button.callback('ü§î –ù–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ', 'partially_helped')],
      ])
    );

    userSessions[userId].step = 'feedback';
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
bot.on('callback_query', async (ctx) => {
  const userId = ctx.from.id;
  const callbackData = ctx.callbackQuery.data;

  await ctx.answerCbQuery();

  if (userSessions[userId].step === 'feedback') {
    if (callbackData === 'helped') {
      await ctx.reply(
        '–†–∞–¥, —á—Ç–æ —Å–º–æ–≥ –ø–æ–º–æ—á—å! –Ø –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏, –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑—É –∏ "–î–Ω–µ–≤–Ω–∏–∫—É —á—É–≤—Å—Ç–≤".',
        Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribe')],
        ])
      );
    } else if (callbackData === 'not_helped' || callbackData === 'partially_helped') {
      const message = callbackData === 'not_helped'
        ? '–ñ–∞–ª—å, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å —Å–ª–æ–∂–Ω—ã–º?'
        : '–†–∞–¥, —á—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–º–æ–≥–ª–æ. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º. –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Å–µ–π—á–∞—Å?';

      await ctx.reply(message);
      userSessions[userId].step = 'dialog';
    } else if (callbackData === 'subscribe') {
      await ctx.reply(
        '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É —á–∞—Ç—É, –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑—É –∏ "–î–Ω–µ–≤–Ω–∏–∫—É —á—É–≤—Å—Ç–≤".'
      );
    }
  }
});

/**
 * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
 */
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch((err) => {
  console.error(`[–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞] ${err.message}`);
});
